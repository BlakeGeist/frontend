'use strict';

const Joi = require('joi');
const common = require('../common');
const _ = require('lodash');

const combine = () => _.assign({}, baseFields, withdrawal, notWithdrawal, cashback, commission);

function makeFieldsRequiredForTypes(types, schema, fields) {
  if (_.isString(types)) {
    types = [types];
  }
  if (_.isString(fields)) {
    fields = [fields];
  }

  for (let field of fields) {
    let constraint = schema[field];
    if (!constraint) {
      console.log("field not found", field);
      continue;
    }
    for (let type of types) {
      constraint = constraint.when('type', { is: type, then: Joi.required() });
    }
    schema[field] = constraint;
  }

  return schema;
}

const baseFields = {
  id: common.id,
  user_id: common.id,
  name: common.name,
  slug: common.slug,
  description: common.description,
  type: Joi.string().valid('cashback', 'referral_commission', 'cashback_commission', 'commission', 'withdrawal', 'master_withdrawal', 'withdrawal_detail', 'vip_commission', 'escrow'),
  direction: Joi.string().valid('in', 'out').description('Out for withdrawals, withdrawal_details and master_withdrawal, in for incoming cash'),
  date_tracked: Joi.date().iso(),
  date_initiated: Joi.date().iso(),
  date_locked: Joi.date().iso(),
  date_confirmed: Joi.date().iso(),
  date_paid: Joi.date().iso()
};

const withdrawal = {
  gateway: Joi.string().allow('').max(40),
  source_type: Joi.string().allow('').max(40),
  amount_fees: Joi.number().integer().min(0).description('Fees paid in the lowest subdivision of the currency, e.g. cents for USD'),
  amount_taxes: Joi.number().integer().min(0).description('Taxes paid in the lowest subdivision of the currency, e.g. cents for USD')
};
const notWithdrawal = {
  merchant_id: common.id,
  outclick_id: common.id,
  source_transaction_id: Joi.string().allow('').max(255),
  merchant_name: Joi.string().allow('').max(255),
  order_id: Joi.string().allow('').max(255),
  currency: common.currency,
  state: Joi.string().valid('tracked', 'initiated', 'confirmed', 'cancelled', 'paid', 'locked', 'review'),
  amount_to_user: Joi.number().integer().description('Currency amount that goes to the user in the lowest subdivision of the currency, e.g. cents for USD'),
  subscription_amount_to_user: Joi.number().integer().description('Currency  vip amount that goes to the user in the lowest subdivision of the currency, e.g. cents for USD'),
  regular_amount_to_user: Joi.number().integer().description('Currency  regular  amount that goes to the user in the lowest subdivision of the currency, e.g. cents for USD'),
  merchant_rate: Joi.number().integer()
};
const cashback = {
  //amount_purchase: Joi.number().integer().min(0).description('User\'s purchase amount in the lowest subdivision of the currency, e.g. cents for USD'),
  //amount_gross: Joi.number().integer().min(0).description('Gross currency amount in the lowest subdivision of the currency, e.g. cents for USD'),
  amount_purchase: Joi.number().integer().description('User\'s purchase amount in the lowest subdivision of the currency, e.g. cents for USD'),
  amount_gross: Joi.number().integer().description('Gross currency amount in the lowest subdivision of the currency, e.g. cents for USD'),
  amount_net: Joi.number().integer().description('Net profit in the lowest subdivision of the currency, e.g. cents for USD'),
  //amount_to_referral: Joi.number().min(0).description('Currency amount that goes to the referral in the lowest subdivision of the currency, e.g. cents for USD'),
  amount_to_referral: Joi.number().description('Currency amount that goes to the referral in the lowest subdivision of the currency, e.g. cents for USD'),
  cashback_rate: Joi.number().integer()
};
const commission = {
  commission_rate: Joi.number().integer()
};

let post = combine();
// Tweak for posts
post.id = Joi.forbidden();
post.user_id = post.user_id.required();
makeFieldsRequiredForTypes(['cashback', 'commission', 'referral_commission', 'cashback_commission'], post, ['merchant_id', 'outclick_id', 'source_transaction_id', 'currency', 'state', 'amount_to_user']);
makeFieldsRequiredForTypes('commission', post, 'commission_rate');
makeFieldsRequiredForTypes('cashback', post, ['cashback_rate', 'amount_purchase', 'amount_gross', 'amount_net']);
makeFieldsRequiredForTypes('withdrawal', post, 'gateway');

module.exports = {
  incomingPost: Joi.object().keys(post).unknown(true),
  incomingPatch: Joi.object().keys(combine()).unknown(true),
  outgoingGet: Joi.object().keys(_.extend(combine(), {
    created: Joi.date().iso(),
    last_updated: Joi.date().iso()
  })),
  columns: Object.keys(combine()),
  forbiddenAttributes: []
};
