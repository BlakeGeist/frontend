'use strict';

const Joi = require('joi');
const transactionSchemas = require(__basedir + 'src/schemas/data/transactions');

describe('Transactions Schema', function () {

  describe('Universal', function () {

    it('Empty PATCH', function () {
      const results = Joi.validate({}, transactionSchemas.incomingPatch);
      expect(results.error).to.not.exist;
    });

    it('Patch - Accept Unknown Fields', function () {
      const results = Joi.validate({ fake: 'super-fake' }, transactionSchemas.incomingPatch);
      expect(results.error).to.not.exist;
    });

  });

  describe('Cashback', function () {

    describe('POST', function () {

      const schema = transactionSchemas.incomingPost;

      it('should validate', function () {
        const results = Joi.validate(cashback, schema);
        expect(results.error).to.not.exist;
      });

      it('should fail when "id" is present', function () {
        const brokenCashback = _.extend({}, cashback, { id: 123 });
        const results = Joi.validate(brokenCashback, schema);
        expect(results.error).to.exist;
        expect(results.error).to.have.property('name', 'ValidationError');
      });

      it('should fail when missing required fields', function () {
        const brokenCashback = _.omit(cashback, ['merchant_id', 'amount_to_user']);
        const results = Joi.validate(brokenCashback, schema);
        expect(results.error).to.exist;
        expect(results.error).to.have.property('name', 'ValidationError');
      });

    });

    describe('PATCH', function () {

      const schema = transactionSchemas.incomingPatch;

      it('should validate when all fields are present', function () {
        const extendedCashback = _.extend({}, cashback, { id: 123 });
        const results = Joi.validate(extendedCashback, schema);
        expect(results.error).to.not.exist;
      });

      it('should validate when some fields are present', function () {
        const results = Joi.validate(cashback, schema);
        expect(results.error).to.not.exist;
      });

    });

  });

  describe('Commission', function () {

    describe('POST', function () {

      const schema = transactionSchemas.incomingPost;

      it('should validate', function () {
        const results = Joi.validate(commission, schema);
        expect(results.error).to.not.exist;
      });

      it('should fail when "id" is present', function () {
        const brokenCashback = _.extend({}, commission, { id: 123 });
        const results = Joi.validate(brokenCashback, schema);
        expect(results.error).to.exist;
        expect(results.error).to.have.property('name', 'ValidationError');
      });

      it('should fail when missing required fields', function () {
        const brokenCommission = _.omit(commission, ['commission_rate']);
        const results = Joi.validate(brokenCommission, schema);
        expect(results.error).to.exist;
        expect(results.error).to.have.property('name', 'ValidationError');
      });

    });

    describe('PATCH', function () {

      const schema = transactionSchemas.incomingPatch;

      it('should validate when all fields are present', function () {
        const extendedCashback = _.extend({}, commission, { id: 123 });
        const results = Joi.validate(extendedCashback, schema);
        expect(results.error).to.not.exist;
      });

      it('should validate when some fields are present', function () {
        const results = Joi.validate(commission, schema);
        expect(results.error).to.not.exist;
      });

    });
  });

});

const cashback = {
  "user_id": 128,
  "merchant_id": 25639,
  "outclick_id": 61,
  "type": "cashback",
  "direction": "in",
  "source_transaction_id": "pqkav98",
  "currency": "usd",
  "state": "initiated",
  "cashback_rate": 40,
  "amount_purchase": 29900,
  "amount_gross": 14950,
  "amount_to_user": 5980,
  "amount_to_referral": 0,
  "amount_fees": 0,
  "amount_net": 8970,
  "date_initiated": "2015-11-05T22:43:56.000Z"
};

const commission = {
  "user_id": 128,
  "merchant_id": 25639,
  "outclick_id": 61,
  "type": "commission",
  "direction": "in",
  "source_transaction_id": "pqkav98",
  "currency": "usd",
  "state": "initiated",
  "commission_rate": 40,
  "amount_gross": 14950,
  "amount_to_user": 5980,
  "amount_net": 8970,
  "date_initiated": "2015-11-05T22:43:56.000Z"
};
